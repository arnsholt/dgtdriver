package org.riisholt.dgtdriver;

/**
 * TODO: Document this class.
 */
public class ClockAck implements DgtMessage {
    public final byte ack0;
    public final byte ack1;
    public final byte ack2;
    public final byte ack3;

    public ClockAck(byte[] data) throws DgtProtocolException {
        if(data.length != 7)
            throw new DgtProtocolException("ClockAck expects exactly 7 bytes of data (got " + data.length + ")");

        ack0 = (byte) ((data[1] & 0x7f) | ((data[3] << 3) & 0x80));
        ack1 = (byte) ((data[2] & 0x7f) | ((data[3] << 2) & 0x80));
        ack2 = (byte) ((data[4] & 0x7f) | ((data[0] << 3) & 0x80));
        ack3 = (byte) ((data[5] & 0x7f) | ((data[0] << 2) & 0x80));
    }

    public boolean isError() { return ack0 == 0x40; }
    public boolean isAutoGenerated() { return (ack1 & 0x80) == 0x80; }

    public boolean isReady() { return ack1 == 0x81; }

    public Button buttonPressed() {
        switch(ack3) {
            case 0x31:
                return Button.BACK;
            case 0x32:
                return Button.PLUS;
            case 0x33:
                return Button.RUN;
            case 0x34:
                return Button.MINUS;
            case 0x35:
                return Button.OK;
            default:
                return null;
        }
    }

    public boolean isDisplayAck() { return ack1 == 0x01; }
    public boolean isButtonAck() { return ack1 == 0x08; }
    public boolean isVersionAck() { return ack1 == 0x09; }
    public byte[] clockVersion() { return new byte[] { (byte) (ack2 >> 4), (byte) (ack2 & 0x0f) }; }
    public boolean isSetNRunAck() { return ack1 == 0x0a; }
    public boolean isBeepAck() { return ack1 == 0x0b; }

    public enum Button {
        BACK,
        PLUS,
        RUN,
        MINUS,
        OK
    }
}
